🎉 *Bienvenue {mention} dans le groupe* *Q\\&R Malikiyyah* \\! 🎊

📌 *__Comment poser une question__ \\?*
\\#N° \\[suivre l'ordre\\] \\+ N° \\[suivre l'ordre du jour\\] \\+ Question
Exemple : \\#625 1 L'urine de bébé est\\-elle impure \\?

📌 *__OBJECTIF DU GROUPE__* :
Trouver des réponses à vos questions de fiqh, de 'aqiidah et de tasawwuf touchant à votre pratique\\.

⚠️ Ce groupe *n’est pas un substitut* à l’apprentissage de votre religion\\.
📌 **[Pour suivre des cours cliquez ici](https://www.notion.so/majlisalfatih/Cours-574a6ea54b2d4134b18a7d362ca7d00f)**

📌 *__Qui répond aux questions ici__ \\?*

• **Abdullah Mathieu Gallant**
• **Saifoullah Abu Muhammad**
• **Admin\\(s\\) \\( @ibtisaamou pour les sœurs \\)**

📌 **[Pour connaître leur cursus, leurs shuyuukh, clique ici](https://www.notion.so/majlisalfatih/46691c76bd6e441483fcdd211d5880df?v=ec736494d7cd446783c655cb0dbb6e58)**

Ils sont tous deux des étudiants avancés en sciences islamiques qui ont l'autorisation de leurs shuyûkh pour enseigner et répondre aux questions, mais ils ne pourront pas avoir réponse à tout\\.

S'ils ne connaissent pas la réponse, vous serez redirigés vers un mufti francophone\\.

📌 **[🔗 Rejoindre le groupe Q\\&R Malikiyyah](https://t.me/+ZBL9frEFpvYyNThh)**

📌 *__RÈGLES DU GROUPE__*

    • ⚠️ *Une seule question par membre par jour* ⚠️
    • ⚠️ *__NUMÉROTEZ VOS QUESTIONS SVP__* ⚠️
• Les enseignants ont besoin de faire des recherches pour certaines questions, aussi par respect nous vous demandons de ne pas les relancer systématiquement mais de patienter 24h avant de le faire\\.
    • Pas de questions théoriques sans application pratique \\(ex\\. hukm de manger de la sirène\\)\\.
    • Vous pouvez demander des précisions si la réponse donnée n'est pas claire, mais évitez de demander le raison d'être et les preuves des statuts juridiques\\.
    • **__Interdit de partager les réponses sans permission__**
    • Pas de débats ni d’échanges entre les membres\\.
    • Il n'est pas permis de répondre à la place des admins\\.

⚠️ *__Non respect \\= EXPULSION__*

📌 *__À TITRE INFORMATIF__*

📌 **Veuillez vous adresser à [l'IFI](https://institut-francophone-iftaa.com/question)** si vous avez besoin d'une fatwa\\.
• *Pas de réponse aux questions sensibles, les envoyez à * @questionsprivees

📌 **✅ {mention}, pour continuer, veuillez cliquer sur "accepter"\\.**
"""







######################  daily msg  ######################

async def send_daily_message(context: CallbackContext):
    """Envoie un message quotidien à 00h01."""
    message = (
        "Nous nous retrouvons ce jour par la Grâce d'Allah dans Q&R MALIKIYYAH, "
        "groupe dédié aux questions pratiques de fiqh, de 'aqiidah et de tasawwuf de la communauté musulmane ⭐️\n\n"
        "📌 **RAPPEL GÉNÉRAL** 📌\n\n"

        "▪️ Respectez les [règles du groupe](https://t.me/c/1912372093/7898) \n"
        "▪️ Et surtout : étudiez la Science !\n"
        "👉 Remplissez cette obligation en suivant [des cours](https://majlisalfatih.weebly.com/cours.html)\n\n"
        "Baraak Allaahu fiikum !"
    )

    try:
        await context.bot.send_message(chat_id=CHAT_ID, text=message, parse_mode="Markdown")
        logging.info("✅ Message quotidien envoyé avec succès.")
    except Exception as e:
        logging.error(f"❌ Erreur lors de l'envoi du message quotidien : {e}")

# ⏳ Planifier l'envoi du message à 00h01 tous les jours
aiocron.crontab('1 0 * * *', func=send_daily_message, args=[None])



####################################

####################################


async def check_question_number(update: Update, context: CallbackContext) -> None:
    """Vérifie si un message contient un numéro de question valide (#XXX) et suit l'ordre strict."""

    if not update.message:
        return

    user = update.message.from_user
    message_text = update.message.text.strip()  # Supprimer les espaces inutiles
    chat_id = update.message.chat_id
    mention = get_mention(user)
    user_id = user.id
    current_time = time.time()

    # ✅ Ignorer si c'est une réponse à un autre message
    if update.message.reply_to_message:
        return

    # ✅ Vérifier si l'utilisateur est un simple membre (exclure admins)
    try:
        chat_member = await context.bot.get_chat_member(chat_id, user_id)
        if chat_member.status != "member":
            return  # Ignorer les admins et autres rôles
    except Exception as e:
        logging.error(f"❌ Erreur lors de la vérification du statut pour {user_id} : {e}")
        return

    # ✅ Vérifier si l'utilisateur a récemment posé une question (moins de 15 min)
    last_time = user_last_question_time.get(user_id, 0)
    if current_time - last_time < 1:  # ⏳ 15 minutes = 900 secondes
        return  # Ignorer les messages de cet utilisateur s'il a déjà posé une question récemment

    # ✅ Vérifier si un `#` est présent dans le message
    match = re.search(r"#(\d+)", message_text)

    if not match:
        last_number = last_question_number.get(chat_id, 0)
        expected_number = last_number + 1

        # 🔴 Correction : Incrémenter immédiatement pour éviter les conflits
        last_question_number[chat_id] = expected_number

        await update.message.reply_text(
            f"{mention} Veuillez inclure un numéro de question avec #{expected_number}."

        )
        return

    # ✅ Extraire le numéro de la question
    question_number = int(match.group(1))

    # ✅ Récupérer le dernier numéro de question pour ce chat
    last_number = last_question_number.get(chat_id, 0)
    expected_number = last_number + 1

    # ✅ Vérifier si le bot démarre en cours de route (ex: le groupe est déjà à #1400)
    if chat_id not in last_question_number:
        last_question_number[chat_id] = question_number
        user_last_question_time[user_id] = current_time
        return

    # ✅ Vérifier que la numérotation suit bien l’ordre séquentiel
    if question_number < expected_number:
        await update.message.reply_text(
            f"{mention} Ce numéro est déjà utilisé. Veuillez utiliser #{expected_number}."
        )
        return

    if question_number > expected_number:
        await update.message.reply_text(
            f"{mention} Vous avez sauté des numéros ! Le bon numéro est #{expected_number}."
        )
        # 🔴 On incrémente directement le dernier numéro pour éviter les conflits
        last_question_number[chat_id] += 1
        return

    # ✅ Mettre à jour avec le dernier numéro
    last_question_number[chat_id] = question_number
    user_last_question_time[user_id] = current_time  # Mise à jour du timestamp utilisateur

    await check_and_close_group(update, context)  # Vérifier si la limite de 10 questions est atteinte

**********************************************************
async def initialize_last_question_number(context: CallbackContext, chat_id: int):
    """Récupère le dernier numéro #XXX trouvé dans le groupe, en prenant le plus grand dans les 50 derniers messages."""
    try:
        last_valid_number = 0  # ✅ On commence avec 0 et on cherche le plus grand numéro

        async for message in context.bot.get_chat(chat_id).get_history(limit=50):  # 🔹 On récupère les 50 derniers messages
            if message.text:
                match = re.search(r"#(\d+)", message.text)
                if match:
                    num = int(match.group(1))
                    last_valid_number = max(last_valid_number, num)  # ✅ On garde toujours le plus grand trouvé

        last_question_number[chat_id] = last_valid_number  # ✅ Mise à jour avec le dernier numéro correct
        logging.info(f"✅ Initialisation : dernier numéro trouvé dans {chat_id} → #{last_question_number[chat_id]}")

    except Exception as e:
        logging.error(f"❌ Erreur lors de l'initialisation de last_question_number pour {chat_id} : {e}")
        last_question_number[chat_id] = 0  # Sécurité en cas d'erreur
**********************************************************