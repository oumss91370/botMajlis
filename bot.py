import os
import time
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import re
from dotenv import load_dotenv
import datetime
import asyncio
from telegram import ChatPermissions
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, CallbackQueryHandler
from keep_alive import keep_alive

load_dotenv()
token = os.getenv('MAJLIS_TOKEN')
CHAT_ID = -1001912372093  # ‚ö†Ô∏è Remplace avec l'ID r√©el de ton groupe

# Dictionnaire pour compter le nombre de questions pos√©es chaque jour


# Activer les logs pour voir les erreurs
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# üìå Lire le token depuis le fichier apikey


TOKEN = token
questions_today = {}

last_question_number = {}
user_welcome_messages = {}




# ‚úÖ Fonction pour obtenir un `@username` m√™me si l'utilisateur n'en a pas


def get_mention(user):
    """Retourne @username si disponible, sinon affiche juste le pr√©nom/nom sans lien."""
    try:
        if user.username:
            logging.info(f"‚ÑπÔ∏è Utilisateur trouv√© avec username : @{user.username}")
            return f"@{user.username}"
        else:
            first_name = user.first_name if user.first_name else "Utilisateur inconnu"
            clean_name = re.sub(r"([_*[\]()~`>#+-=|{}.!])", r"\\\1", first_name)
            logging.info(f"‚ÑπÔ∏è Utilisateur trouv√© sans username, utilisant pr√©nom : {clean_name}")
            return f"@{clean_name}"
    except Exception as e:
        logging.error(f"‚ùå Erreur dans get_mention() : {e}")
        return "@Utilisateur_Inconnu"


# ‚úÖ Fonction pour accueillir les nouveaux membres avec @username ou @NomPrenom

# Stockage des messages de bienvenue envoy√©s

# ‚úÖ Fonction pour accueillir les nouveaux membres et g√©rer l'acceptation


# Activer les logs

async def welcome_new_member(update: Update, context: CallbackContext) -> None:
    """G√®re l'arriv√©e des nouveaux membres et affiche un bouton 'Accepter'."""
    if update.message and update.message.new_chat_members:
        logging.info("üü† Nouveau membre d√©tect√© dans le groupe.")

        for new_member in update.message.new_chat_members:
            try:
                mention = get_mention(new_member)
                logging.info(f"‚úÖ Mention du nouveau membre : {mention}")

                # ‚úÖ Cr√©er le bouton "Accepter"
                keyboard = [[InlineKeyboardButton("‚úÖ Accepter", callback_data=f"accept_{new_member.id}")]]
                reply_markup = InlineKeyboardMarkup(keyboard)

                # ‚úÖ Message de bienvenue avec bouton
                rules_message = f"""
üéâ *Bienvenue {mention} dans le groupe* *Q\\&R Malikiyyah* \\! üéä

üìå *__Comment poser une question__ \\?*
\\#N¬∞ \\[suivre l'ordre\\] \\+ N¬∞ \\[suivre l'ordre du jour\\] \\+ Question
Exemple : \\#625 1 L'urine de b√©b√© est\\-elle impure \\?

üìå *__OBJECTIF DU GROUPE__* :
Trouver des r√©ponses √† vos questions de fiqh, de 'aqiidah et de tasawwuf touchant √† votre pratique\\.

‚ö†Ô∏è Ce groupe *n‚Äôest pas un substitut* √† l‚Äôapprentissage de votre religion\\.
üìå **[Pour suivre des cours cliquez ici](https://www.notion.so/majlisalfatih/Cours-574a6ea54b2d4134b18a7d362ca7d00f)**

üìå *__Qui r√©pond aux questions ici__ \\?*

‚Ä¢ **Abdullah Mathieu Gallant**
‚Ä¢ **Saifoullah Abu Muhammad**
‚Ä¢ **Admin\\(s\\) \\( @ibtisaamou pour les s≈ìurs \\)**

üìå **[Pour conna√Ætre leur cursus, leurs shuyuukh, clique ici](https://www.notion.so/majlisalfatih/46691c76bd6e441483fcdd211d5880df?v=ec736494d7cd446783c655cb0dbb6e58)**

Ils sont tous deux des √©tudiants avanc√©s en sciences islamiques qui ont l'autorisation de leurs shuy√ªkh pour enseigner et r√©pondre aux questions, mais ils ne pourront pas avoir r√©ponse √† tout\\.

S'ils ne connaissent pas la r√©ponse, vous serez redirig√©s vers un mufti francophone\\.

üìå **[üîó Rejoindre le groupe Q\\&R Malikiyyah](https://t.me/+ZBL9frEFpvYyNThh)**

üìå *__R√àGLES DU GROUPE__*

    ‚Ä¢ ‚ö†Ô∏è *Une seule question par membre par jour* ‚ö†Ô∏è
    ‚Ä¢ ‚ö†Ô∏è *__NUM√âROTEZ VOS QUESTIONS SVP__* ‚ö†Ô∏è
‚Ä¢ Les enseignants ont besoin de faire des recherches pour certaines questions, aussi par respect nous vous demandons de ne pas les relancer syst√©matiquement mais de patienter 24h avant de le faire\\.
    ‚Ä¢ Pas de questions th√©oriques sans application pratique \\(ex\\. hukm de manger de la sir√®ne\\)\\.
    ‚Ä¢ Vous pouvez demander des pr√©cisions si la r√©ponse donn√©e n'est pas claire, mais √©vitez de demander le raison d'√™tre et les preuves des statuts juridiques\\.
    ‚Ä¢ **__Interdit de partager les r√©ponses sans permission__**
    ‚Ä¢ Pas de d√©bats ni d‚Äô√©changes entre les membres\\.
    ‚Ä¢ Il n'est pas permis de r√©pondre √† la place des admins\\.

‚ö†Ô∏è *__Non respect \\= EXPULSION__*

üìå *__√Ä TITRE INFORMATIF__*

üìå **Veuillez vous adresser √† [l'IFI](https://institut-francophone-iftaa.com/question)** si vous avez besoin d'une fatwa\\.
‚Ä¢ *Pas de r√©ponse aux questions sensibles, les envoyez √† * @questionsprivees

üìå **‚úÖ {mention}, pour continuer, veuillez cliquer sur "accepter"\\.**
"""

                # ‚úÖ Envoyer le message avec le bouton "Accepter"
                logging.info("üì§ Envoi du message de bienvenue...")
                message = await update.message.reply_text(
                    rules_message,
                    parse_mode="MarkdownV2",
                    reply_markup=reply_markup
                )
                logging.info(f"‚úÖ Message de bienvenue envoy√© avec succ√®s pour {mention}.")

                # üîπ Sauvegarder l'ID du message pour suppression plus tard
                context.chat_data[new_member.id] = message.message_id
                logging.info(f"üìã ID du message sauvegard√© : {message.message_id}")

            except Exception as e:
                logging.error(f"‚ùå Erreur lors de l'envoi du message de bienvenue pour {mention} : {e}")


async def button_click(update: Update, context: CallbackContext) -> None:
    """G√®re l'√©v√©nement lorsque l'utilisateur clique sur 'Accepter'."""
    query = update.callback_query
    user_id = int(query.data.split("_")[1])  # Extraire l'ID de l'utilisateur depuis le callback_data
    chat_id = query.message.chat_id

    if query.from_user.id != user_id:
        await query.answer("‚ùå Vous ne pouvez pas accepter les r√®gles pour quelqu'un d'autre.", show_alert=True)
        return

    try:
        # ‚úÖ Supprimer le message de bienvenue
        welcome_message_id = context.chat_data.get(user_id)
        if welcome_message_id:
            await context.bot.delete_message(chat_id, welcome_message_id)
            del context.chat_data[user_id]  # Nettoyer la variable

        # ‚úÖ Supprimer le message du bouton "Accepter"
        # await query.message.delete()

        # ‚úÖ Envoyer un message de confirmation
        await query.message.reply_text(
            f"‚úÖ Merci {query.from_user.first_name}, vous avez accept√© les r√®gles du groupe !",
            parse_mode="MarkdownV2"
        )

    except Exception as e:
        logging.error(f"Erreur lors de la suppression des messages : {e}")


async def already_answered(update: Update, context: CallbackContext) -> None:
    """R√©pond automatiquement qu'une question a d√©j√† √©t√© trait√©e lorsque /dr est utilis√© en r√©ponse."""

    if update.message and update.message.reply_to_message:
        user = update.message.from_user
        chat_id = update.message.chat_id
        message_to_reply = update.message.reply_to_message

        # ‚úÖ V√©rifier si l'utilisateur est un "member" (autoriser tous les autres statuts)
        try:
            chat_member = await context.bot.get_chat_member(chat_id, user.id)

            if chat_member.status == "member":
                await update.message.reply_text("‚ùå Seuls les admins peuvent utiliser cette commande.")
                return  # ‚ùå Bloquer uniquement les "members"

        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la v√©rification du statut pour {user.id} : {e}")

        try:
            # ‚úÖ Obtenir la mention de l'utilisateur
            mention = get_mention(message_to_reply.from_user)

            # ‚úÖ Envoyer la r√©ponse automatique
            await context.bot.send_message(
                chat_id=chat_id,
                reply_to_message_id=message_to_reply.message_id,
                text=f"‚ö†Ô∏è {mention}, votre question a d√©j√† √©t√© trait√©e.\n\n"
                     "üîç *Merci de bien vouloir chercher les mots-cl√©s dans la fonction* **'Recherche'**.\n"
                     " Baraakallah u fik !",
                parse_mode="Markdown"
            )

            # ‚úÖ Supprimer la commande /dr apr√®s envoi du message
            await update.message.delete()

        except Exception as e:
            logging.error(f"‚ùå Erreur lors de l'envoi du message /dr : {e}")
            await update.message.reply_text("‚ùå Impossible d'envoyer le message.")


# ‚úÖ Ajouter la commande au gestionnaire


async def check_acceptance(update: Update, context: CallbackContext) -> None:
    """G√®re la validation des r√®gles et supprime le message apr√®s acceptation."""

    if update.message and update.message.text.strip().lower() == "accepter":
        user_id = update.message.from_user.id
        chat_id = update.message.chat_id

        # R√©cup√©rer l'ID du message de bienvenue
        welcome_message_id = context.chat_data.get(user_id)

        try:
            # ‚úÖ Supprimer le message "accepter"
            await update.message.delete()
        except Exception as e:
            logging.error(f"Impossible de supprimer le message 'accepter' : {e}")

        if welcome_message_id:
            try:
                # ‚úÖ Supprimer le message de bienvenue
                await context.bot.delete_message(chat_id, welcome_message_id)
                del context.chat_data[user_id]  # Nettoyer le stockage
            except Exception as e:
                logging.error(f"Impossible de supprimer le message de bienvenue : {e}")

        # ‚úÖ Envoyer une confirmation
        mention = update.message.from_user.first_name
        await update.message.reply_text(
            f"‚úÖ Merci {mention}, vous avez accept√© les r√®gles du groupe !",
            parse_mode="MarkdownV2"
        )


# Fonction pour v√©rifier si un message respecte le bon format de num√©rotation


# Dictionnaire pour stocker le dernier message d'un utilisateur
user_last_question_time = {}


async def initialize_last_question_number(context: CallbackContext, chat_id: int):
    """R√©cup√®re uniquement le dernier num√©ro #XXX trouv√© dans le groupe et l'utilise comme r√©f√©rence."""
    try:
        last_valid_number = 0  # Valeur par d√©faut

        updates = await context.bot.get_updates()  # ‚úÖ R√©cup√®re les derniers messages re√ßus par le bot

        for update in reversed(updates):  # üîπ Parcourt les messages du plus r√©cent au plus ancien
            if update.message and update.message.chat_id == chat_id and update.message.text:
                match = re.search(r"#(\d+)", update.message.text)
                if match:
                    last_valid_number = int(match.group(1))  # ‚úÖ Prend imm√©diatement le dernier `#` trouv√©
                    break  # ‚úÖ D√®s qu'on trouve un `#`, on s'arr√™te

        last_question_number[chat_id] = last_valid_number  # ‚úÖ Mise √† jour avec le dernier num√©ro trouv√©
        logging.info(f"‚úÖ Initialisation : dernier num√©ro trouv√© dans {chat_id} ‚Üí #{last_question_number[chat_id]}")

    except Exception as e:
        logging.error(f"‚ùå Erreur lors de l'initialisation de last_question_number pour {chat_id} : {e}")
        last_question_number[chat_id] = 0  # S√©curit√© en cas d'erreur


# ‚úÖ Dictionnaire pour stocker le premier message du user dans le groupe
user_first_message_time = {}
last_reset_date = datetime.date.today()


# ‚úÖ Dictionnaire pour stocker la date de r√©initialisation

async def reset_daily_data():
    """R√©initialise les questions quotidiennes et les timestamps tout en conservant les derniers num√©ros de question."""
    global last_question_number, user_first_message_time, questions_today

    # üîπ Sauvegarder les derni√®res valeurs de `last_question_number` uniquement si elle n'est pas vide
    if last_question_number:
        last_values = last_question_number.copy()
    else:
        last_values = {}

    # üîÑ R√©initialiser uniquement les donn√©es journali√®res
    questions_today.clear()
    user_first_message_time.clear()

    # ‚úÖ Restaurer les derni√®res valeurs de `last_question_number`
    last_question_number.clear()
    last_question_number.update(last_values)  # Restaure les derni√®res valeurs enregistr√©es

    logging.info("üîÑ R√©initialisation quotidienne termin√©e avec conservation du dernier num√©ro de question.")

async def check_question_number(update: Update, context: CallbackContext) -> None:
    """V√©rifie le premier message d'un utilisateur et ignore les suivants."""
    global last_reset_date

    if not update.message:
        return
        # üîÑ V√©rification quotidienne pour r√©initialiser `user_first_message_time` au d√©but de chaque journ√©e
        today = datetime.date.today()
        if today != last_reset_date:
            user_first_message_time.clear()  # üîÑ R√©initialise les participants de la veille
            last_reset_date = today
            logging.info("üîÑ R√©initialisation quotidienne automatique des participants.")


    user = update.message.from_user
    message_text = update.message.text.strip()
    chat_id = update.message.chat_id
    mention = get_mention(user)
    user_id = user.id
    current_time = time.time()

    # ‚úÖ V√©rifier si le bot a d√©j√† initialis√© le dernier num√©ro pour ce groupe
    if chat_id not in last_question_number:
        await initialize_last_question_number(context, chat_id)

    # ‚úÖ Ignorer si c'est une r√©ponse √† un autre message
    if update.message.reply_to_message:
        return

    # ‚úÖ V√©rifier si l'utilisateur est un simple membre (exclure admins)
    try:
        chat_member = await context.bot.get_chat_member(chat_id, user_id)
        if chat_member.status != "member":
            return  # Ignorer les admins et autres r√¥les
    except Exception as e:
        logging.error(f"‚ùå Erreur lors de la v√©rification du statut pour {user_id} : {e}")
        return

    # ‚úÖ Si l'utilisateur a d√©j√† √©t√© v√©rifi√©, on ignore tous ses messages suivants
    if user_id in user_first_message_time:
        return

    # ‚úÖ Enregistrer la premi√®re participation de l'utilisateur
    user_first_message_time[user_id] = current_time

    # ‚úÖ V√©rifier si un `#` est pr√©sent dans le message
    match = re.search(r"#(\d+)", message_text)
    last_number = last_question_number.get(chat_id, 0)
    expected_number = last_number + 1  # Toujours avancer de `n + 1`

    if not match:
        # üî¥ Si pas de `#`, on force l'utilisateur √† en mettre un et on avance imm√©diatement
        last_question_number[chat_id] = expected_number
        logging.warning(
            f"‚ùóÔ∏è Message sans # d√©tect√©. Dernier num√©ro : {last_number}, Num√©ro attendu : {expected_number}")

        await update.message.reply_text(
            f"{mention} As-salam aleykoum, il semble que vous ayez oubli√© d'inclure un num√©ro de question. "
            f"Pourriez-vous, s'il vous pla√Æt, ajouter #{expected_number} ? Baarak Allahu fik."
        )
    else:
        # ‚úÖ Extraire le num√©ro de la question
        question_number = int(match.group(1))
        logging.info(
            f"üîç Num√©ro d√©tect√© : {question_number}, Dernier num√©ro connu : {last_number}, Num√©ro attendu : {expected_number}")

        # üî¥ Si le num√©ro est d√©j√† utilis√© ou en retard, on propose le prochain et on avance imm√©diatement
        if question_number < last_number:
            last_question_number[chat_id] = expected_number
            logging.error(f"‚ùå Num√©ro d√©j√† utilis√©. Utilisateur : {mention}, Num√©ro utilis√© : {question_number}, "
                          f"Num√©ro attendu : {expected_number}")

            await update.message.reply_text(
                f"{mention}  As-salam aleykoum, ce num√©ro semble d√©j√† avoir √©t√© utilis√©. "
                f"Je vous invite √† utiliser plut√¥t #{expected_number}. Baarak Allahu fik."
            )

        # üî¥ Si l'utilisateur saute un num√©ro, on avance imm√©diatement et on propose le bon
        elif question_number > expected_number:
            last_question_number[chat_id] = expected_number
            logging.warning(f"‚ö†Ô∏è Num√©ro saut√©. Utilisateur : {mention}, Num√©ro utilis√© : {question_number}, "
                            f"Num√©ro attendu : {expected_number}")

            await update.message.reply_text(
                f"{mention} As-salam aleykoum, il semble que certains num√©ros aient √©t√© saut√©s. üòä "
                f"Je vous invite √† utiliser le num√©ro #{expected_number}. Baarak Allahu fik."
            )

        # ‚úÖ Si tout est correct, on enregistre la question et on avance
        else:
            last_question_number[chat_id] = question_number
            logging.info(f"‚úÖ Nouvelle question enregistr√©e : {mention} a utilis√© #{question_number} dans {chat_id}")

    # ‚úÖ V√©rifier si on doit fermer le groupe apr√®s cette question
    #await check_and_close_group(update, context)

# ‚úÖ Planification fiable avec `apscheduler`
def schedule_daily_reset():
    scheduler = AsyncIOScheduler()
    scheduler.add_job(reset_daily_data, 'cron', hour=0, minute=0)  # Tous les jours √† minuit
    scheduler.start()



# ‚úÖ Fonction pour supprimer un message hors sujet avec /hs (r√©serv√© aux admins)
async def remove_off_topic(update: Update, context: CallbackContext) -> None:
    """Supprime un message hors sujet et aussi le message /hs de l'admin."""
    if update.message and update.message.reply_to_message:
        user = update.message.from_user  # L'admin ou l'utilisateur qui ex√©cute la commande
        chat_id = update.message.chat_id
        message_to_delete = update.message.reply_to_message
        target_user = message_to_delete.from_user  # L'utilisateur dont le message est supprim√©

        # ‚úÖ V√©rifier si l'utilisateur est un "member" (les autres statuts sont autoris√©s)
        try:
            chat_member = await context.bot.get_chat_member(chat_id, user.id)

            if chat_member.status == "member":
                await update.message.reply_text("‚ùå Seuls les admins peuvent utiliser cette commande.")
                return  # ‚ùå Bloquer uniquement les "members"

        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la v√©rification du statut pour {user.id} : {e}")

        try:
            # ‚úÖ Supprimer le message hors sujet
            await context.bot.delete_message(chat_id, message_to_delete.message_id)

            # ‚úÖ Mentionner l'utilisateur concern√© correctement
            mention = get_mention(target_user)

            # ‚úÖ Envoyer un message expliquant la suppression
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"‚ö†Ô∏è {mention}, *votre message a √©t√© supprim√© car il est hors sujet.*\n\n"
                     "üìå **Seules les questions li√©es √† la croyance, au fiqh malikite et √† la spiritualit√© qui touchent votre quotidien sont autoris√©es.**\n"
                     "Merci de respecter les r√®gles du groupe.",
                parse_mode="Markdown"
            )

            # ‚úÖ Supprimer aussi le message de l'admin contenant /hs
            await context.bot.delete_message(chat_id, update.message.message_id)

        except Exception as e:
            logging.error(f"Erreur lors de la suppression du message hors sujet : {e}")
            await update.message.reply_text("‚ùå Impossible de supprimer ce message.")


# ‚úÖ Fonction pour expulser un utilisateur avec /wawas (r√©serv√© aux admins)
async def remove_waswas_message(update: Update, context: CallbackContext) -> None:
    """Supprime un message si un admin utilise /waswas en r√©ponse et informe l'utilisateur directement dans le groupe."""
    if update.message and update.message.reply_to_message:
        user = update.message.from_user  # L'admin ou la personne utilisant la commande
        chat_id = update.message.chat_id
        message_to_delete = update.message.reply_to_message
        target_user = message_to_delete.from_user  # Utilisateur dont le message est supprim√©

        # ‚úÖ V√©rifier si l'utilisateur est un "member" (les autres statuts sont autoris√©s)
        try:
            chat_member = await context.bot.get_chat_member(chat_id, user.id)

            if chat_member.status == "member":
                await update.message.reply_text("‚ùå Seuls les admins peuvent utiliser cette commande.")
                return  # ‚ùå Bloquer uniquement les "members"

        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la v√©rification du statut pour {user.id} : {e}")

        try:
            # ‚úÖ Supprimer le message du membre contenant du waswas
            await context.bot.delete_message(chat_id, message_to_delete.message_id)

            # ‚úÖ Mentionner l'utilisateur concern√© correctement
            mention = get_mention(target_user)

            # ‚úÖ Envoyer un message expliquant la suppression
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"‚ö†Ô∏è {mention}, *votre message a √©t√© supprim√©, car il pourrait causer des was√¢wis aux autres membres* \n\n"
                     f"(doutes maladifs nuisant √† la pratique religieuse).\n\n"
                     "üìå *Veuillez poser votre question en priv√© √†  @questionsprivees.*\n"
                     "Merci de votre compr√©hension.",
                parse_mode="Markdown"
            )

            # ‚úÖ Supprimer le message de l'admin contenant /waswas
            await context.bot.delete_message(chat_id, update.message.message_id)

        except Exception as e:
            logging.error(f"Erreur lors de la suppression du message de waswas : {e}")
            await update.message.reply_text("‚ùå Impossible de supprimer ce message.")

async def remove_private_message(update: Update, context: CallbackContext) -> None:
    """Supprime un message si un admin utilise /priver en r√©ponse et informe l'utilisateur directement dans le groupe."""
    if update.message and update.message.reply_to_message:
        user = update.message.from_user  # L'admin ou la personne utilisant la commande
        chat_id = update.message.chat_id
        message_to_delete = update.message.reply_to_message
        target_user = message_to_delete.from_user  # Utilisateur dont le message est supprim√©

        # ‚úÖ V√©rifier si l'utilisateur est un "member" (les autres statuts sont autoris√©s)
        try:
            chat_member = await context.bot.get_chat_member(chat_id, user.id)
            if chat_member.status == "member":
                return  # ‚ùå Bloquer uniquement les "members"

        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la v√©rification du statut pour {user.id} : {e}")
            return

        try:
            # ‚úÖ Supprimer le message du membre contenant la question priv√©e
            await context.bot.delete_message(chat_id, message_to_delete.message_id)

            # ‚úÖ Mentionner l'utilisateur concern√© correctement
            mention = get_mention(target_user)

            # ‚úÖ Envoyer un message expliquant la suppression
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"‚ö†Ô∏è {mention}, *votre question semble priv√©e ou expose potentiellement des p√©ch√©s.*\n\n"
                     "üìå *Je vous invite √† poser votre question en priv√© √† @questionsprivees.*\n"
                     "Nous vous remercions pour votre compr√©hension.",
                parse_mode="Markdown"
            )

            # ‚úÖ Supprimer le message de l'admin contenant /priver
            await context.bot.delete_message(chat_id, update.message.message_id)

        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la suppression du message priv√© : {e}")
            await update.message.reply_text("‚ùå Impossible de supprimer ce message.")



# /jeune
async def send_fasting_info(update: Update, context: CallbackContext) -> None:
    """Envoie une r√©ponse automatique sur le fiqh du je√ªne lorsque /jeune est utilis√© en r√©ponse."""

    if update.message and update.message.reply_to_message:
        user = update.message.from_user
        chat_id = update.message.chat_id
        message_to_reply = update.message.reply_to_message

        # ‚úÖ V√©rifier si l'utilisateur est un "member" (les autres statuts sont autoris√©s)
        try:
            chat_member = await context.bot.get_chat_member(chat_id, user.id)

            if chat_member.status == "member":
                await update.message.reply_text("‚ùå Seuls les admins peuvent utiliser cette commande.")
                return  # ‚ùå Bloquer uniquement les "members"

        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la v√©rification du statut pour {user.id} : {e}")

        try:
            # ‚úÖ Obtenir la mention de l'utilisateur mentionn√©
            mention = get_mention(message_to_reply.from_user)

            # ‚úÖ Envoyer la r√©ponse automatique
            await context.bot.send_message(
                chat_id=chat_id,
                reply_to_message_id=message_to_reply.message_id,
                text=f"As-salam aleykoum {mention}, votre question laisse entendre que vous n'avez pas encore √©tudi√© "
                     "le fiqh du je√ªne de fa√ßon syst√©matique en suivant un cours sur le sujet ou, du moins, "
                     "qu'une r√©vision du sujet vous serait b√©n√©fique.\n\n"
                     "üìå *Voici un mini-cours gratuit sans inscription qui vous permettra de vous acquitter de cette obligation :* \n"
                     "üëâ [√âpitre du Je√ªne](https://majlisalfatih.weebly.com/epitre-du-jeune.html)\n\n"
                     " Baraak Allahu fik !",
                parse_mode="Markdown"
            )

            # ‚úÖ Supprimer la commande /jeune apr√®s envoi du message
            await update.message.delete()

        except Exception as e:
            logging.error(f"‚ùå Erreur lors de l'envoi du message /jeune : {e}")
            await update.message.reply_text("‚ùå Impossible d'envoyer le message.")


# ‚úÖ Ajouter la commande au gestionnaire

async def remove_excess_question(update: Update, context: CallbackContext) -> None:
    """Supprime une question en trop et ajuste la num√©rotation pour √©viter les erreurs."""
    if update.message and update.message.reply_to_message:
        user = update.message.from_user  # L'admin qui ex√©cute la commande
        chat_id = update.message.chat_id
        message_to_delete = update.message.reply_to_message
        target_user = message_to_delete.from_user  # L'utilisateur dont la question est supprim√©e
        message_text = message_to_delete.text.strip()  # Texte du message supprim√©

        # ‚úÖ V√©rifier si l'utilisateur est admin (emp√™cher les "members" d'utiliser la commande)
        try:
            chat_member = await context.bot.get_chat_member(chat_id, user.id)

            if chat_member.status == "member":
                await update.message.reply_text("‚ùå Seuls les admins peuvent utiliser cette commande.")
                return  # ‚ùå Bloquer uniquement les "members"

        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la v√©rification du statut pour {user.id} : {e}")

        try:
            # ‚úÖ V√©rifier si un num√©ro de question est pr√©sent
            match = re.search(r"#(\d+)", message_text)
            if match:
                question_number = int(match.group(1))

                # ‚úÖ V√©rifier si la question supprim√©e est la derni√®re enregistr√©e
                if last_question_number.get(chat_id) == question_number:
                    last_question_number[chat_id] -= 1  # D√©cr√©menter pour √©viter les sauts de num√©ros

            # ‚úÖ Supprimer le message en trop
            await context.bot.delete_message(chat_id, message_to_delete.message_id)

            # ‚úÖ Mentionner l'utilisateur concern√©
            mention = get_mention(target_user)

            # ‚úÖ Envoyer un message expliquant la suppression
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"‚ö†Ô∏è {mention}, une seule question par membre par jour est autoris√©e.\n\n"
                     "‚ùå Votre question a √©t√© supprim√©e automatiquement.\n"
                     "üö® S'il s'agit d'une urgence, veuillez envoyer votre question au compte @questionsprivees.",
                parse_mode="Markdown"
            )

            # ‚úÖ Supprimer aussi le message de l'admin contenant /1
            await context.bot.delete_message(chat_id, update.message.message_id)

        except Exception as e:
            logging.error(f"Erreur lors de la suppression de la question en trop : {e}")
            await update.message.reply_text("‚ùå Impossible de supprimer ce message.")
users_who_asked_today = {}  # Dictionnaire qui stocke les utilisateurs ayant pos√© une question aujourd'hui


# ‚úÖ Dictionnaire pour stocker les questions du jour

# async def check_and_close_group(update: Update, context: CallbackContext) -> None:
#     """Ferme le groupe si 10 questions ont √©t√© pos√©es dans la journ√©e."""
#     global questions_today, users_who_asked_today  # Ajout de la nouvelle liste
#
#     if not update.message or not update.message.text:
#         return
#
#     user_id = update.message.from_user.id
#     chat_id = update.message.chat_id
#     today = datetime.date.today()
#
#     # ‚úÖ V√©rifier si c'est une nouvelle journ√©e (reset du compteur)
#     if chat_id not in questions_today or questions_today[chat_id]["date"] != today:
#         questions_today[chat_id] = {"count": 0, "date": today}
#         users_who_asked_today[chat_id] = set()  # R√©initialiser la liste des utilisateurs du jour
#         logging.info(f"üîÑ R√©initialisation du compteur de questions pour le groupe {chat_id}.")
#
#     # ‚úÖ V√©rifier si l'utilisateur a d√©j√† pos√© une question aujourd'hui
#     if user_id not in users_who_asked_today[chat_id]:  # üöÄ Si c'est son premier message du jour
#         questions_today[chat_id]["count"] += 1
#         count = questions_today[chat_id]["count"]
#         logging.info(f"üìä Nombre de questions pos√©es aujourd'hui dans {chat_id} : {count}")
#
#         # ‚úÖ Ajouter l'utilisateur √† la liste des utilisateurs ayant pos√© une question aujourd'hui
#         users_who_asked_today[chat_id].add(user_id)
#
#     # ‚úÖ V√©rifier si la limite de 10 questions est atteinte
#     if questions_today[chat_id]["count"] >= 10:
#         logging.warning(f"üö® Limite de 10 questions atteinte dans {chat_id}. Fermeture du groupe.")
#         await close_group_until_midnight(update, context)


# async def close_group_until_midnight(update: Update, context: CallbackContext) -> None:
#     """Ferme le groupe jusqu'√† minuit."""
#     chat_id = update.message.chat_id
#
#     try:
#         # üîí Bloquer l'envoi de messages
#         await context.bot.set_chat_permissions(
#             chat_id=chat_id,
#             permissions=ChatPermissions( can_send_messages=False,      # üî¥ Bloque l'envoi de messages
#                 can_send_other_messages=False )
#         )
#
#         # üì¢ Envoyer un message d'information
#         await update.message.reply_text(
#             "‚ö†Ô∏è *La limite de 10 questions a √©t√© atteinte pour aujourd‚Äôhui.*\n\n"
#             "üìå *Le groupe est ferm√© jusqu'√† minuit.*\n"
#             "üìå *En cas d‚Äôurgence, contactez @questionsprivees.*",
#             parse_mode="Markdown"
#         )
#
#         logging.info(f"üîí Groupe {chat_id} ferm√© jusqu'√† minuit.")
#
#         # ‚úÖ R√©initialiser imm√©diatement le compteur de questions
#         questions_today[chat_id] = {"count": 0, "date": datetime.date.today()}
#         logging.info(f"üîÑ R√©initialisation imm√©diate du compteur pour {chat_id}.")
#
#         # ‚è≥ Calcul du temps restant jusqu'√† minuit
#         now = datetime.datetime.now()
#         reopen_time = datetime.datetime.combine(now.date(), datetime.time(23, 59))
#         seconds_until_reopen = (reopen_time - now).total_seconds()
#
#         # ‚úÖ Planifier la r√©ouverture du groupe √† minuit
#         asyncio.create_task(reopen_group_at_2359(chat_id, context, seconds_until_reopen))
#
#     except Exception as e:
#         logging.error(f"‚ùå Erreur lors de la fermeture du groupe : {e}")


async def reopen_group_at_2359(chat_id, context, delay):
    """Attend jusqu'√† 23h59 et r√©active les messages."""
    await asyncio.sleep(delay)  # Attendre jusqu'√† 23h59

    try:
        # üîì R√©activer les messages
        await context.bot.set_chat_permissions(
            chat_id=chat_id,
            permissions=ChatPermissions(can_send_messages=True)
        )

        # üì¢ Envoyer un message de r√©ouverture
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚úÖ *Les questions sont √† nouveau ouvertes !* Vous pouvez poser vos questions.",
            parse_mode="Markdown"
        )

        # üéØ R√©initialiser le compteur pour la nouvelle journ√©e
        questions_today[chat_id] = {"count": 0, "date": datetime.date.today()}
        logging.info(f"‚úÖ Groupe {chat_id} rouvert, compteur r√©initialis√©.")

    except Exception as e:
        logging.error(f"‚ùå Erreur lors de la r√©ouverture du groupe : {e}")


async def ban_user(update: Update, context: CallbackContext) -> None:
    """Bannit un utilisateur du groupe si un admin utilise /ban en r√©ponse √† un message."""
    if update.message and update.message.reply_to_message:
        admin = update.message.from_user
        chat_id = update.message.chat_id
        target_user = update.message.reply_to_message.from_user

        # V√©rifier si l'utilisateur qui ex√©cute la commande est un admin
        chat_member = await context.bot.get_chat_member(chat_id, admin.id)
        if chat_member.status not in ["administrator", "creator"]:
            await update.message.reply_text("‚ùå Seuls les administrateurs peuvent utiliser cette commande.")
            return

        try:
            # Bannir l'utilisateur
            await context.bot.ban_chat_member(chat_id, target_user.id)

            # Supprimer le message de l'admin contenant la commande /ban
            await update.message.delete()

            # Obtenir la mention correcte de l'utilisateur banni
            mention = get_mention(target_user)

            # Envoyer un message de confirmation dans le groupe
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"üö´ {mention} a √©t√© banni du groupe par un administrateur.",
                parse_mode="MarkdownV2"
            )

        except Exception as e:
            logging.error(f"Erreur lors de l'exclusion de l'utilisateur : {e}")
            await update.message.reply_text("‚ùå Impossible de bannir cet utilisateur.")

    else:
        await update.message.reply_text(
            "‚ùå Utilisation incorrecte. R√©pondez √† un message avec `/ban` pour bannir un utilisateur.")


async def unclear_question(update: Update, context: CallbackContext) -> None:
    """Indique qu'une question n'est pas claire et demande √† l'utilisateur de la reformuler."""
    if update.message and update.message.reply_to_message:
        user = update.message.from_user  # L'admin qui ex√©cute la commande
        chat_id = update.message.chat_id
        target_message = update.message.reply_to_message
        target_user = target_message.from_user  # L'utilisateur qui a pos√© la question

        # ‚úÖ V√©rifier si l'utilisateur est un admin (emp√™cher les "members" d'utiliser la commande)
        try:
            chat_member = await context.bot.get_chat_member(chat_id, user.id)

            if chat_member.status == "member":
                await update.message.reply_text("‚ùå Seuls les admins peuvent utiliser cette commande.")
                return  # ‚ùå Bloquer uniquement les "members"

        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la v√©rification du statut pour {user.id} : {e}")

        try:
            # ‚úÖ Mentionner l'utilisateur concern√©
            mention = get_mention(target_user)

            # ‚úÖ Envoyer un message d'avertissement sans supprimer son message
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"Wa'alaykumus-salaam {mention},\n\n"
                     "‚ùå Votre question n'est pas claire.\n"
                     "üìå Veuillez la reformuler en modifiant votre message.",
                parse_mode="Markdown"
            )

            # ‚úÖ Supprimer le message de l'admin contenant /pc
            try:
                await update.message.delete()
            except Exception as e:
                logging.error(f"‚ùå Impossible de supprimer le message de commande /pc : {e}")

        except Exception as e:
            logging.error(f"Erreur lors de l'envoi du message /pc : {e}")
            await update.message.reply_text("‚ùå Impossible d'envoyer l'avertissement.")


# Remplace `CHAT_ID` par l'ID de ton groupe

async def correction(update: Update, context: CallbackContext) -> None:
    """D√©cr√©mente le dernier num√©ro de question manuellement via la commande /correction avec v√©rification admin."""
    if not update.message:
        return

    user = update.message.from_user
    chat_id = update.message.chat_id

    # ‚úÖ V√©rifier si l'utilisateur est un admin
    try:
        chat_member = await context.bot.get_chat_member(chat_id, user.id)
        if chat_member.status == "member":
            await update.message.reply_text("‚ùå")
            return
    except Exception as e:
        logging.error(f"‚ùå Erreur lors de la v√©rification du statut pour {user.id} : {e}")
        return

    # ‚úÖ D√©cr√©menter le dernier num√©ro de question
    if chat_id in last_question_number and last_question_number[chat_id] > 0:
        last_question_number[chat_id] -= 1
        logging.info(
            f"‚ûñ D√©cr√©ment manuel dans le groupe {chat_id}. Nouveau dernier num√©ro : #{last_question_number[chat_id]}")

    # ‚úÖ Supprimer imm√©diatement le message de l'admin
    try:
        await update.message.delete()
    except Exception as e:
        logging.error(f"‚ùå Impossible de supprimer le message de commande /correction : {e}")




async def plus(update: Update, context: CallbackContext) -> None:
    """Incr√©mente le dernier num√©ro de question manuellement via la commande /plus avec v√©rification admin."""
    if not update.message:
        return

    user = update.message.from_user
    chat_id = update.message.chat_id

    # ‚úÖ V√©rifier si l'utilisateur est un admin
    try:
        chat_member = await context.bot.get_chat_member(chat_id, user.id)
        if chat_member.status == "member":
            await update.message.reply_text("‚ùå")
            return
    except Exception as e:
        logging.error(f"‚ùå Erreur lors de la v√©rification du statut pour {user.id} : {e}")
        return

    # ‚úÖ Incr√©menter le dernier num√©ro de question
    if chat_id not in last_question_number:
        last_question_number[chat_id] = 0

    last_question_number[chat_id] += 1
    logging.info(f"‚ûï Incr√©ment manuel dans le groupe {chat_id}. Nouveau dernier num√©ro : #{last_question_number[chat_id]}")

    # ‚úÖ Supprimer imm√©diatement le message de l'admin
    try:
        await update.message.delete()
    except Exception as e:
        logging.error(f"‚ùå Impossible de supprimer le message de commande /plus : {e}")


# ‚úÖ Ajouter le handler de la commande /plus

async def send_daily_message(context: CallbackContext) -> None:
    """Envoie un message quotidien √† 00h01."""
    message = (
        "Nous nous retrouvons ce jour par la Gr√¢ce d'Allah dans Q&R MALIKIYYAH, "
        "groupe d√©di√© aux questions pratiques de fiqh, de 'aqiidah et de tasawwuf de la communaut√© musulmane ‚≠êÔ∏è\n\n"
        "üìå **RAPPEL G√âN√âRAL** üìå\n\n"
        "‚ñ™Ô∏è Respectez les [r√®gles du groupe](https://t.me/c/1912372093/7898) \n"
        "‚ñ™Ô∏è Et surtout : √©tudiez la Science !\n"
        "üëâ Remplissez cette obligation en suivant [des cours](https://majlisalfatih.weebly.com/cours.html)\n\n"
        "Baraak Allaahu fiikum !"
    )

    try:
        await context.bot.send_message(chat_id=CHAT_ID, text=message, parse_mode="Markdown")
        logging.info("‚úÖ Message quotidien envoy√© avec succ√®s.")
    except Exception as e:
        logging.error(f"‚ùå Erreur lors de l'envoi du message quotidien : {e}")


def schedule_daily_message(application: Application) -> None:
    """Planifie l'envoi du message quotidien √† 00h01."""
    job_queue = application.job_queue
    now = datetime.datetime.now()
    midnight = datetime.datetime.combine(now.date() + datetime.timedelta(days=1), datetime.time(0, 1))

    # Calcul du temps restant jusqu'√† 00h01
    delay = (midnight - now).total_seconds()

    # Planifier l'ex√©cution quotidienne
    job_queue.run_daily(send_daily_message, time=datetime.time(0, 1), chat_id=CHAT_ID)

    logging.info("‚úÖ Message quotidien planifi√© pour 00h01.")


CHAT_IDtest = -1002391499606  # Remplace par l'ID du canal o√π tu veux ex√©cuter la t√¢che


async def keep_bot_active(context: CallbackContext) -> None:
    """T√¢che ex√©cut√©e toutes les 3 minutes uniquement dans un canal sp√©cifique."""
    try:
        await context.bot.send_message(
            chat_id=CHAT_IDtest,
            text="üîÑ Le bot est actif.",
        )
        logging.info("‚úÖ Message anti-sleep envoy√©.")
    except Exception as e:
        logging.error(f"‚ùå Erreur lors de l'envoi du message anti-sleep : {e}")


# ‚úÖ Fonction principale
def main():
    keep_alive()  # Garde le bot en ligne

    logging.info("D√©marrage du bot...")

    app = Application.builder().token(TOKEN).build()
    # ‚úÖ Planifier la t√¢che toutes les 3 minutes UNIQUEMENT sur le canal d√©fini
    job_queue = app.job_queue
    job_queue.run_repeating(keep_bot_active, interval=400, first=10)  # üîÑ Ex√©cution toutes les 3 minutes

    # message quotidien
    schedule_daily_message(app)

    #

    # Gestion des nouveaux membres
    app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, welcome_new_member))

    # V√©rification du format et de l'ordre des questions
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_question_number))
    logging.info("‚úÖ Handler `welcome_new_member` ajout√© avec succ√®s.")

    app.add_handler(CommandHandler("1", remove_excess_question))
    app.add_handler(CommandHandler("correction", correction))
    app.add_handler(CommandHandler("plus", plus))
    app.add_handler(CommandHandler("priver", remove_private_message))
    app.add_handler(CommandHandler("pc", unclear_question))

    # V√©rification de l'acceptation des r√®gles
    # app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_acceptance))

    # fonction hs
    app.add_handler(CommandHandler("hs", remove_off_topic))

    # wawas
    app.add_handler(CommandHandler("waswas", remove_waswas_message))

    # app.add_handler(CommandHandler("10", close_group_for_6h))

    #app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_and_close_group))

    app.add_handler(CommandHandler("ban", ban_user))

    app.add_handler(CommandHandler("dr", already_answered))
    app.add_handler(CommandHandler("jeune", send_fasting_info))

    # boutton
    app.add_handler(CallbackQueryHandler(button_click, pattern=r"^accept_\d+$"))

    # Lancer le bot
    app.run_polling()
    asyncio.create_task(schedule_daily_reset(app))


if __name__ == "__main__":
    main()
